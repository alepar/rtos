			.include "m168Pdef.inc"	; Используем ATMega8

                        .include "config.asm"
			.include "macro.asm"	; Все макросы у нас тут



;============DSEG=============================================================
.DSEG
; Очереди операционной системы
.equ TaskQueueSize = 20				; Размер очереди задач
.equ TimersPoolSize = 20			; Количество таймеров

TaskQueue:
	.byte TaskQueueSize	 		; Очереди задач в SRAM
TimersPool:	
	.byte TimersPoolSize*3			; Адреса информации о таймерах (очередь)


;===========CSEG==============================================================
.include "vectors.asm"		; Все вектора прерываний спрятаны в этом файле

.ORG INT_VECTORS_SIZE		; Конец таблицы прерываний


;=============================================================================!
; Interrupts procs ===========================================================!
;=============================================================================!
; Timer Interrupt 
; Main Timer Service - Служба Таймеров Ядра РТОС - Обработчик прерывания
RtosTimerInt:
	TimerService				; Служба таймера RTOS 
	reti					; выходим из прерывания

;.............................................................................

;Прерывания от пришедшего байта в UART
UartRxInt:
	push GREG
	in GREG,SREG			; Save Sreg
	push GREG

	lds GREG,UDR0
	sts UDR0,GREG

	pop GREG				; Восстанавливаем регистры
	out SREG,GREG			;
	pop GREG
	reti					; Выходим из прерывания

;=============================================================================!
; Main code ==================================================================!
;=============================================================================!
Reset:
	INIT_STACK RAMEND	; prepare stack							
	CLEAR_RAM		; clear ram
	INIT_RTOS		; prepare task queues

	SETUP_USART0	; setup usart0
	SETUP_TIMER0 10000	; setup rtos timer
	sei



; Запуск фоновых процессов
Background:	
	rcall	Send				; Отсыл байт в UART 
			

Main:
	rcall 	ProcessTaskQueue		; Обработка очереди процессов
	rcall 	Idle				; Простой Ядра
								
	rjmp 	Main				; Основной цикл микроядра РТОС

;=============================================================================
;Tasks
;=============================================================================
Idle:		ret		; Простой ядра. Не используется

;-----------------------------------------------------------------------------
; USART Transmit task
Send:	SetTimerTask TS_Send, 25
	ldi GREG, 48
	rcall SendByte
	ldi GREG, 49
	rcall SendByte
	ldi GREG, 50
	rcall SendByte
	ret

SendByte:	lds Tmp2, UCSR0A
	sbrs Tmp2, UDRE0	; Wait for empty transmit buffer
	rjmp SendByte
	sts UDR0, GREG
	ret

;=============================================================================
; RTOS Here
;=============================================================================
; Это область определения адресов и индексов задач. Порядок должен быть одинаковым, от этого
; критично зависит работа ОС

.include "kernel.asm"		; Подклчюаем ядро ОС

; Индексы (номера) задач.
.equ TS_Idle 	= 0
.equ TS_Send 	= 1


; А это их адреса во флеше. ПО индексу вычисляется смещение в таблице адресов и происходит 
; Переход к задаче
TaskProcs:
.dw Idle        ; [00] 
.dw Send        ; [01] 
