			.include "m168Pdef.inc"	; Используем ATMega8

                        .include "config.asm"
			.include "macro.asm"	; Все макросы у нас тут



;============DSEG=============================================================
.DSEG
; Очереди операционной системы
.equ TaskQueueSize = 20				; Размер очереди задач
.equ TimersPoolSize = 20			; Количество таймеров

TaskQueue:
	.byte TaskQueueSize	 		; Адрес очереди задач в SRAM
TimersPool:	
	.byte TimersPoolSize*3			; Адреса информации о таймерах (очередь)


;===========CSEG==============================================================
.include "vectors.asm"		; Все вектора прерываний спрятаны в этом файле

.ORG INT_VECTORS_SIZE		; Конец таблицы прерываний


;=============================================================================!
; Interrupts procs ===========================================================!
;=============================================================================!
; Output Compare 2 interrupt 
; Main Timer Service - Служба Таймеров Ядра РТОС - Обработчик прерывания
OutComp2Int:
	TimerService				; Служба таймера RTOS 
	RETI					; выходим из прерывания

;.............................................................................

;Прерывания от пришедшего байта в UART
RX_OK:
	PUSH GREG
	IN GREG,SREG			; Save Sreg
	PUSH GREG

	LDS GREG,UDR0
	STS UDR0,GREG

	POP GREG				; Восстанавливаем регистры
	OUT SREG,GREG			;
	POP GREG
	RETI					; Выходим из прерывания

;=============================================================================!
; Main code ==================================================================!
;=============================================================================!
Reset:
	INIT_STACK RAMEND								
	.include "init.asm"				; Все инициализации тут.


; Запуск фоновых процессов
Background:	
	RCALL	Send				; Отсыл байт в UART 
			

Main:
	rcall 	ProcessTaskQueue		; Обработка очереди процессов
	rcall 	Idle				; Простой Ядра
								
	RJMP 	Main				; Основной цикл микроядра РТОС

;=============================================================================
;Tasks
;=============================================================================
Idle:		RET		; Простой ядра. Не используется

;-----------------------------------------------------------------------------
; Задача отсылки данных через терминал
Send:
        SetTimerTask TS_Send, 4
        lds GREG, 50
        sts UDR0, GREG				; Отправить его через USART 
        ret

;=============================================================================
; RTOS Here
;=============================================================================
; Это область определения адресов и индексов задач. Порядок должен быть одинаковым, от этого
; критично зависит работа ОС

.include "kernel_def.asm"	; Подключаем настройки ядра
.include "kernel.asm"		; Подклчюаем ядро ОС

; Индексы (номера) задач.
.equ TS_Idle 	= 0
.equ TS_Send 	= 1

; А это их адреса во флеше. ПО индексу вычисляется смещение в таблице адресов и происходит 
; Переход к задаче
TaskProcs:
.dw Idle        ; [00] 
.dw Send        ; [01] 
